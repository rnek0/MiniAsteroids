/* *  Asteroids for fun: licencia MIT: http://es.wikipedia.org/wiki/MIT_License */
#include "miniwin.h"
using namespace miniwin;#include <cstdlib>#include <list>#include <time.h>#include <sstream>using namespace std;#include "objetos.h"// [x] - Los asteroides tienen que apareer en una posicion lejos del centro.// [x] - Los asteroides pequeños pueden pasar por dentro de la nave.// [ ] - La nave tiene "fueguecillo" por detras.// [ ] - Al cruzar la pantalla los objetos aparecen / reparecen.// [x] - Puntos, vidas ....// [x] - Colores...// [ ] - La nave explota// [ ] - ...class Juego{   Nave N;   list<Asteroide*> A;   list<Misil*> M;   bool _game_over;   int _score;   int _niveau;   int _vidas;   //vector niveaux;public:   Juego();   bool game_over() const {return _game_over;}   void movimiento();   void colisiones();   void tecla(int t);   void repinta() const;   int  affiche_score() const;   void up_niveau();   bool aucun_asteroide() const;   int  get_vidas() const;};Juego::Juego()   :N(XTAM/2, YTAM/2){                             //inicializacion del juego en el constructor   srand(time(0));
   vredimensiona(XTAM, YTAM);   _vidas = 3;   _niveau = 1;   _score = 0;   for(int i = 0; i < 8; i++){      A.push_back(new Asteroide());   }   _game_over = false;}int Juego::get_vidas() const{   return _vidas;}bool Juego::aucun_asteroide() const{   if(A.empty()){      return true;   }   else{      return false;   }}void Juego::up_niveau(){   _niveau += 1;   //   _score  += 150*_niveau; //Bonus up niveau   for(int i = 0; i < 8+_niveau; i++){      A.push_back(new Asteroide());   }}int Juego::affiche_score() const{   return _score;}void Juego::movimiento(){   N.mueve();   for(auto it = A.begin(); it != A.end(); it++){      (*it)->mueve();   }   for(auto itm = M.begin(); itm != M.end(); itm++){      (*itm)->mueve();   }   auto itm = M.begin();   while(itm != M.end()){      if((*itm)->fuera()){         delete (*itm);         itm = M.erase(itm);      }else{         itm++;      }   }}void Juego::colisiones(){   // Nave con asteroides   for(auto it = A.begin(); it != A.end(); it++){      if(N.choca(*it)){         //_game_over = true;         _vidas -= 1;         if(_vidas==0){            _game_over = true;         }         delete *it;         it = A.erase(it);         //N = new Nave(0,0);      }   }   // TODO: misiles con asteroides   auto itm = M.begin();   while(itm != M.end()){      // buscar un asteroide que tenga el Misil dentro      auto ita = A.begin();      while(ita != A.end() && !(*itm)->choca(*ita)){         ita++;      }      if(ita != A.end()){         delete *itm;         itm = M.erase(itm);         (*ita)->explota(A);         //TODO: explotar asteroide en 4         delete *ita;         ita = A.erase(ita);         _score +=25;      }else{         itm++;      }   }}void Juego::tecla(int t){   if(t==DERECHA){      N.rota(-10); //N.a -= 10;    //angulo de la nave   } else if(t==IZQUIERDA){      N.rota(+10);   } else if (t==ARRIBA){      N.acelera();   } else if (t==ABAJO){      N.frena();   } else if (t==ESPACIO){      M.push_back(N.dispara());   }}void Juego::repinta() const {   borra();   N.pinta();   //color(0);   for(auto it = A.begin(); it != A.end(); it++){      (*it)->pinta();   }   for(auto itm = M.begin(); itm != M.end(); itm++){      (*itm)->pinta();   }   color(CYAN);   stringstream S;   S << " score : " << affiche_score();   texto(18,20, S.str());   //Vies   stringstream V;   V << "vies : " << get_vidas();   texto(XTAM - 85,20, V.str());   if(game_over()){      texto((XTAM/2)-40,YTAM/2, "PERDU !!!");   }   refresca();}
int main() {   Juego J;   int t = tecla();   while(t != ESCAPE){      if(!J.game_over() && J.get_vidas()!=0){         J.movimiento();         J.colisiones();         J.tecla(t);      }      J.repinta();      if(J.aucun_asteroide()){         espera(2000);         J.up_niveau();      }      espera(20);      t= tecla();   }   vcierra();
   return 0;
}
